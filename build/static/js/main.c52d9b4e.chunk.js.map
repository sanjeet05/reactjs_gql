{"version":3,"sources":["containers/NavBar.jsx","containers/Articles.jsx","containers/Article.jsx","containers/CreateArticle.jsx","containers/EditArticle.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","react","className","Link","to","ARTICLES_QUERY","gql","_templateObject","Articles","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","aria-hidden","react_apollo_browser_umd","query","_ref","loading","error","data","console","log","articles","map","article","index","key","title","description","body","dist_default","format","createdAt","concat","_id","style","marginRight","Component","Article_templateObject","ARTICLE_QUERY","_templateObject2","ARTICLE_DELETE","_templateObject3","Article","toggle","setState","modal","deleteHandler","articleId","deleteArticle","_this2","match","params","variables","Button","color","onClick","bind","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","mutation","onCompleted","history","push","refetchQueries","_ref2","e","preventDefault","CreateArticle_templateObject","ADD_ARTICLE","CreateArticle_templateObject2","CreateArticle","titleChange","target","value","descriptionChange","bodyChange","_this$state","addArticle","htmlFor","type","id","placeholder","onChange","rows","marginLeft","EditArticle_templateObject","EDIT_ARTICLE","EditArticle_templateObject2","containers_EditArticle","EditArticle","redirectToHome","EditArticle_EditForm","EditForm","_this3","updateState","prevProps","_this4","updateArticle","defaultValue","client","ApolloClient","uri","App","toggleNavbar","collapsed","BrowserRouter","containers_NavBar","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c52d9b4e.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = (props) => {\n  return (\n    <Fragment>\n      <nav className=\"navbar navbar-expand-lg fixed-top navbar-light bg-light\">\n        <Link to=\"/\">\n          <span className=\"navbar-brand mb-0 h1\">ReactJS+GraphQL</span>\n        </Link>\n      </nav>\n    </Fragment>\n  )\n};\n\nexport default NavBar;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\n// graphQL query\nconst ARTICLES_QUERY = gql`\n  query {\n    articles {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nclass Articles extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <h1 className=\"display-5 my-3\">Articles</h1>\n          </div>\n          <div className=\"col-md-4 my-3\">\n            <Link to={`/create_article`} className=\"btn btn-primary pull-right\">\n              <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n            </Link>\n          </div>\n        </div>\n\n        <div>\n          <Query query={ARTICLES_QUERY}>\n            {\n              ({ loading, error, data }) => {\n                if (loading) return <h4>Loading...</h4>;\n                else if (error) {\n                  console.log(error);\n                  return <div>Error...</div>;\n                } else {\n                  return (\n                    <Fragment>\n                      {\n                        data.articles.map((article, index) => (\n                          <div className=\"card card-body mb-3\" key={index}>\n                            <div className=\"row\">\n                              <div className=\"col-md-9\">\n                                <h4>{article.title} </h4>\n                                <div>{article.description}</div>\n                                <p>\n                                  {article.body}\n                                </p>\n                                <p>\n                                  Date: <Moment format=\"YYYY-MM-DD HH:mm\">{article.createdAt}</Moment>\n                                </p>\n                              </div>\n                              <div className=\"col-md-3\">\n                                <Link to={`/article/${article._id}`} className=\"btn btn-secondary pull-right\">\n                                  <i className=\"fa fa-eye\" aria-hidden=\"true\"></i>\n                                </Link>\n                                <Link to={`/edit_article/${article._id}`} className=\"btn btn-secondary pull-right\" style={{ marginRight: '10px' }}>\n                                  <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n                                </Link>\n                              </div>\n                            </div>\n                          </div>\n                        ))\n                      }\n                    </Fragment>\n                  );\n                }\n              }\n            }\n          </Query>\n        </div>\n\n      </Fragment>\n    )\n  }\n};\n\nexport default Articles;\n\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n// graphQL query\nconst ARTICLES_QUERY = gql`\n  query {\n    articles {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nconst ARTICLE_QUERY = gql`\n  query ($articleId: ID!) {\n    article(articleInput: {_id: $articleId}) {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nconst ARTICLE_DELETE = gql`\n  mutation ($articleId: ID!) {\n    deleteArticle(articleInput: {_id: $articleId}) {\n      n\n    }\n  }\n`;\n\nclass Article extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false,\n      articleId: '',\n    }\n  }\n\n  toggle = () => {\n    this.setState({ modal: !this.state.modal });\n  }\n\n  deleteHandler = (articleId) => {\n    this.setState({ articleId });\n    this.toggle();\n  }\n  deleteArticle = () => {\n    console.log('deleted');\n    this.toggle();\n  }\n\n  render() {\n    let { articleId } = this.props.match.params;\n    // console.log('articleId', articleId);\n    return (\n      <Fragment>\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <h1 className=\"display-5 my-3\">Article Details</h1>\n          </div>\n          <div className=\"col-md-4 my-3\">\n            <Link to=\"/\" className=\"btn btn-primary pull-right\">\n              <i className=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\n            </Link>\n          </div>\n        </div>\n\n        <div>\n          <Query query={ARTICLE_QUERY} variables={{ articleId }}>\n            {\n              ({ loading, error, data }) => {\n                if (loading) return <h4>Loading...</h4>;\n                else if (error) {\n                  console.log(error);\n                  return <div>Error...</div>;\n                } else {\n                  return (\n                    <Fragment>\n                      <div className=\"card card-body mb-3\">\n                        <div className=\"row\">\n                          <div className=\"col-md-9\">\n                            <h4>{data.article.title} </h4>\n                            <div>{data.article.description}</div>\n                            <p>\n                              {data.article.body}\n                            </p>\n                            <p>\n                              Date: <Moment format=\"YYYY-MM-DD HH:mm\">{data.article.createdAt}</Moment>\n                            </p>\n                          </div>\n                          <div className=\"col-md-3\">\n                            <Button color=\"danger\" className=\"pull-right\" onClick={this.deleteHandler.bind(this, data.article._id)}>\n                              <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Fragment>\n                  );\n                }\n              }\n            }\n          </Query>\n        </div>\n\n        <div>\n          <Modal isOpen={this.state.modal} toggle={this.toggle}>\n            <ModalHeader toggle={this.toggle}>Delete Article</ModalHeader>\n            <ModalBody>\n              <h4>Do you want to delete?</h4>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"secondary\" onClick={this.toggle} style={{ marginRight: '20px' }}>No</Button>\n              <Mutation\n                mutation={ARTICLE_DELETE}\n                onCompleted={() => this.toggle && this.props.history.push('/')}\n                refetchQueries={[\n                  {\n                    query: ARTICLES_QUERY,\n                  }\n                ]}\n              >\n                {(deleteArticle, { data, loading, error }) => (\n                  <div>\n                    <Button\n                      color=\"danger\"\n                      onClick={e => {\n                        e.preventDefault();\n                        deleteArticle({ variables: { articleId: articleId } });\n                      }}\n                    >\n                      Yes\n                    </Button>\n                    {loading && <p>Loading...</p>}\n                    {error && <p>Error: Please try again</p>}\n                  </div>\n                )}\n              </Mutation>\n            </ModalFooter>\n          </Modal>\n        </div>\n\n      </Fragment>\n    )\n  }\n};\n\nexport default Article;\n\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\n\n// graphQL query\nconst ARTICLES_QUERY = gql`\n  query {\n    articles {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nconst ADD_ARTICLE = gql`\n  mutation ($title: String!, $description: String, $body: String!) {\n    createArticle(articleInput: {title: $title, description: $description, body: $body}) {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nclass CreateArticle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: '',\n      description: '',\n      body: '',\n    }\n  }\n\n  titleChange = (e) => { this.setState({ title: e.target.value }) }\n  descriptionChange = (e) => { this.setState({ description: e.target.value }) }\n  bodyChange = (e) => { this.setState({ body: e.target.value }) }\n\n  render() {\n    const {title, description, body} = this.state;\n    console.log('description', description);\n    return (\n      <Fragment>\n        <h3 className=\"display-5 my-3\">Create Article</h3>\n        <div>\n          <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n              <div className=\"col-md-9\">\n\n                <Mutation\n                  mutation={ADD_ARTICLE}\n                  onCompleted={() => this.props.history.push('/')}\n                  refetchQueries={[\n                    {\n                      query: ARTICLES_QUERY,\n                    }\n                  ]}\n                >\n                  {(addArticle, { data, loading, error }) => (\n                    <div>\n                    <form>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"title\"\n                          placeholder=\"Enter Title\"\n                          onChange={this.titleChange}\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"description\"\n                          placeholder=\"Enter Description\"\n                          onChange={this.descriptionChange}\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"body\">Text</label>\n                        <textarea\n                          className=\"form-control\"\n                          rows=\"15\"\n                          id=\"body\"\n                          placeholder=\"Enter Text\"\n                          onChange={this.bodyChange}\n                        >\n                        </textarea>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <Link to=\"/\" className=\"btn btn-secondary\">\n                          Cancel\n                        </Link>\n\n                        <button\n                          style={{marginLeft: '20px'}}\n                          type=\"button\"\n                          className=\"btn btn-primary\"\n                          onClick={e => {\n                            e.preventDefault();\n                            addArticle({ variables: { title, description, body } });\n                          }}\n                        >\n                          Create\n                        </button>\n                      </div>\n                    </form>\n                    {loading && <p>Loading...</p>}\n                    {error && <p>Error: Please try again</p>}\n                    </div>\n                  )}\n                </Mutation>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n};\n\nexport default CreateArticle;\n\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\n\n// graphQL query\nconst ARTICLE_QUERY = gql`\n  query ($articleId: ID!) {\n    article(articleInput: {_id: $articleId}) {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nconst EDIT_ARTICLE = gql`\n  mutation ($articleId: ID!, $title: String!, $description: String, $body: String!) {\n    editArticle(articleInput: {_id: $articleId, title: $title, description: $description, body: $body}) {\n      _id,\n      title,\n      description,\n      body,\n      createdAt\n    }\n  }\n`;\n\nclass EditArticle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  redirectToHome = () => {\n    this.props.history.push('/');\n  }\n\n  render() {\n    let { articleId } = this.props.match.params;\n    return (\n      <Fragment>\n        <h3 className=\"display-5 my-3\">Edit Article</h3>\n        <div>\n          <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n              <div className=\"col-md-9\">\n                <Query query={ARTICLE_QUERY} variables={{ articleId }}>\n                  {\n                    ({ loading, error, data }) => {\n                      if (loading) return <h4>Loading...</h4>;\n                      else if (error) {\n                        console.log(error);\n                        return <div>Error...</div>;\n                      } else {\n                        return <EditForm data={data.article} redirectToHome={this.redirectToHome} />\n                      }\n                    }\n                  }\n                </Query>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n};\n\nexport default EditArticle;\n\n// edit form\nclass EditForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      _id: '',\n      title: '',\n      description: '',\n      body: '',\n    }\n  }\n\n  componentDidMount() {\n    this.updateState(this.props.data);\n  }\n\n  updateState = (article) => {\n    // console.log('article', article)\n    this.setState({\n      _id: article._id,\n      title: article.title,\n      description: article.description,\n      body: article.body,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data._id !== this.state._id) {\n      this.updateState(this.props.data);\n    }\n  }\n\n  titleChange = (e) => { this.setState({ title: e.target.value }) }\n  descriptionChange = (e) => { this.setState({ description: e.target.value }) }\n  bodyChange = (e) => { this.setState({ body: e.target.value }) }\n\n  render() {\n    const { _id, title, description, body } = this.state;\n    return (\n      <Fragment>\n        <Mutation\n          mutation={EDIT_ARTICLE}\n          onCompleted={this.props.redirectToHome}\n        >\n          {(updateArticle, { data, loading, error }) => (\n            <div>\n              <form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"title\">Title</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"title\"\n                    placeholder=\"Enter Title\"\n                    defaultValue={title}\n                    onChange={this.titleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"description\">Description</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"description\"\n                    placeholder=\"Enter Description\"\n                    defaultValue={description}\n                    onChange={this.descriptionChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"body\">Text</label>\n                  <textarea\n                    className=\"form-control\"\n                    rows=\"15\"\n                    id=\"body\"\n                    placeholder=\"Enter Text\"\n                    value={body}\n                    onChange={this.bodyChange}\n                  >\n                  </textarea>\n                </div>\n\n                <div className=\"text-center\">\n                  <Link to=\"/\" className=\"btn btn-secondary\">\n                    Cancel\n                </Link>\n\n                  <button\n                    style={{ marginLeft: '20px' }}\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    onClick={e => {\n                      e.preventDefault();\n                      updateArticle({ variables: { articleId: _id, title, description, body } });\n                    }}\n                  >\n                    Update\n                </button>\n                </div>\n              </form>\n              {loading && <p>Loading...</p>}\n              {error && <p>Error: Please try again</p>}\n            </div>\n          )}\n        </Mutation>\n      </Fragment>\n    )\n  }\n};\n\n","import React, { Component, Fragment } from 'react';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n// import components\nimport NavBar from './containers/NavBar';\nimport Articles from './containers/Articles';\nimport Article from './containers/Article';\nimport CreateArticle from './containers/CreateArticle';\nimport EditArticle from './containers/EditArticle';\n\n// import css\nimport './App.scss';\n\n// graphQL config\nconst client = new ApolloClient({\n  uri: 'http://localhost:3100/api/graphql'\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      collapsed: true,\n    }\n  }\n\n  toggleNavbar = () => {\n    this.setState({ collapsed: !this.state.collapsed });\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    return (\n      <Fragment>\n        <ApolloProvider client={client}>\n          <Router>\n            <div>\n              <NavBar toggleNavbar={this.toggleNavbar} collapsed={collapsed} />\n              <div className=\"container\">\n                <Route exact path=\"/\" component={Articles} />\n                <Route exact path=\"/create_article\" component={CreateArticle} />\n                <Route exact path=\"/article/:articleId\" component={Article} />\n                <Route exact path=\"/edit_article/:articleId\" component={EditArticle} />\n              </div>\n            </div>\n          </Router>\n        </ApolloProvider>\n      </Fragment>\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}